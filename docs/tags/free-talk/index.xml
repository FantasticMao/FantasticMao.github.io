<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Free Talk on FantasticMao&#39;s Blog</title>
    <link>/tags/free-talk/</link>
    <description>Recent content in Free Talk on FantasticMao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Sep 2017 01:10:06 +0800</lastBuildDate>
    
	<atom:link href="/tags/free-talk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何快速上手一个框架</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 14 Sep 2017 01:10:06 +0800</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;大多时候我们总是为寻求成熟可靠的方案，去选择一个框架，解决现有问题。比如使用 &lt;code&gt;System.out.println()&lt;/code&gt; 打印日志很麻烦而且也不规范，于是我们使用 Log4j、Logback 等日志框架；请求的访问量很高，我们则使用 Redis、Memcached 缓存技术（这两个严格意义上不算框架，但情况类似）。&lt;/p&gt;
&lt;p&gt;有时候也会觉得现有的代码太烂，或是其它原因，我们选用了新的框架替换之。比如抛弃了频发抛安全漏洞的 Struts，而使用 Spring MVC；抛弃了繁琐流程的 JDBC，而使用 ORM 框架。&lt;/p&gt;
&lt;p&gt;开源潮流如火如荼，开源框架多如牛毛。在这个时代，我们应如何快速上手一个框架，这便是我今天要分享的主题 —— 关于使用框架的方法论。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>