<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on FantasticMao&#39;s Blog</title>
    <link>/tags/javascript/</link>
    <description>Recent content in JavaScript on FantasticMao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Dec 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 初次体验</title>
      <link>/posts/vue-qa/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>/posts/vue-qa/</guid>
      <description>因为工作需要写一个简单的 CRUD 后台页面，就简单学习了一下 Vue 和 Element-UI，学完之后之后便匆匆上手了，也逐渐适应。这篇文章记录自己在学习和使用 Vue 期间的一些问题和解答。
 Vue 相关 v-bing 指令和 v-on 指令的作用 v-bind 指令的缩写是 :，用于动态绑定一个或多个属性，或者是一个组件的 prop 属性。当 v-bind 绑定的属性是 class 或 style 的时候，表达式的值可以是数组或对象。代码示例和修饰符描述请见 官方文档。
v-on 指令的缩写是 @，用于绑定事件监听器。v-on 被用于普通元素上时只能监听 原生 DOM 事件，被用于自定义组件元素上时可以监听子组件触发的 自定义事件 （由 $emit 定义的事件）。v-on 指令支持的修饰符有 .stop、.prevent、.once 等等，代码示例和更多修饰符描述请见 官方文档。
watch 属性和 computed 属性的区别 Vue 实例的 watch 属性用于监听实例对象上的数据，代码示例请见 官方文档。
Vue 实例的 computed 属性用于计算和生成实例对象的数据，代码示例请见 官方文档。
父组件如何给子组件传递数据 在 Vue 中，父组件可以使用 prop 属性给子组件传递数据，代码示例请见 官方文档。
子组件如何反馈数据给父组件 在 Vue 中，子组件可以使用 emit 属性通过事件给父组件反馈数据，代码示例请见 官方文档。</description>
    </item>
    
    <item>
      <title>jQuery API 小记</title>
      <link>/posts/jquery-api-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 21 Apr 2017 15:44:01 +0800</pubDate>
      
      <guid>/posts/jquery-api-%E5%B0%8F%E8%AE%B0/</guid>
      <description>摘自《JavaScript 权威指南》第 19 章 jQuery 类库。
JavaScript 的核心 API 设计的很简单，但由于不同浏览器之间的严重不兼容，导致客户端的 API 过于复杂。使用 JavaScript 框架或工具类库能简化通用操作，能隐藏浏览器之间的差异，这让很多程序员在开发 Web 应用时变得更简单。撰写本书时，最流行和广泛采用的类库之一就是 jQuery。 jQuery 基础 jQuery 类库定义了一个全局函数：jQuery()。该函数使用频繁，因此在类库中还给它定义了一个快捷别名：$()。这是 jQuery 在全局命名空间中定义的唯一两个变量。
在 jQuery 类库中，最重要的方法是 jQuery()，也就是 $()。它的功能很强大，有 4 中不同的调用方式：
  传递 CSS 选择器字符串给 $()。当通过这种方式调用时，$() 返回当前文档中匹配该选择器的元素集；
  传递一个 Element、Document 或 Window 对象给 $()。在这种情况下，$() 只须简单地将 Element、Document、Window 对象封装成 jQuery 对象并返回；
  传递 HTML 文本字符串给 $()。在这种调用方式下 jQuery 会根据传入的文本创建好 HTML 元素并封装成 jQuery 对象返回；
  传入一个函数给 $()。此时，文档加载完毕且 DOM 可操作时，传入的函数将被调用。
jQuery(function () { // 文档加载完毕时调用  // 所有 jQuery 代码放在这里 });   传递 CSS 选择器字符串给 $()，它返回的 jQuery 对象表示匹配该选择器的元素集。jQuery 对象是类数组，它们拥有 length 属性和介于 0 - length - 1 之间的数值属性。这意味着可以使用标准的数组标识方括号来访问 jQuery 对象的内容。如果不想把数组标识用在 jQuery 对象上，可以使用 size() 来替代 length 属性，用 get() 来替代方括号索引。可以使用 toArray() 将 jQuery 对象转化为真实数组。</description>
    </item>
    
  </channel>
</rss>