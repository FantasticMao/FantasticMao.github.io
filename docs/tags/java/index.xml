<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on FantasticMao&#39;s Blog</title>
    <link>/tags/java/</link>
    <description>Recent content in Java on FantasticMao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 06 May 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Java 编程风格指南</title>
      <link>/2020/05/06/google-java-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0800</pubDate>
      
      <guid>/2020/05/06/google-java-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</guid>
      <description>转载并翻译自 https://google.github.io/styleguide/javaguide.html。个人英语水平有限，应以原文档为标准。
 简介 本文档是 Google Java 语言编程规范的 完整 定义。一个 Java 源文件当且仅当遵守本规范时，才可被描述为 Google 风格。
与其它编程规范指南类似，本文档讨论的不仅涉及代码对齐的美观问题，同时还包含其它类型约定和编码规范。然而，本文档侧重于讨论我们普遍遵循的 硬性规定，也避免提供那些无法明确执行的建议。
术语说明 在本文档中，除非另有说明：
 class 类 表示 ordinary class 普通的类、enum class 枚举类、interface 接口或 annotation 注解类型。 member 成员 表示 nested class 嵌套类、field 属性、method 方法或 constructor 者构造方法，即除初始化方法和注释之外，类的所有最顶层内容。 comment 注释 表示 implementation comments 实现注释。我们不使用术语 documentation comments，而是使用（在 Java 中）更通用的术语 javadoc。  其它出现在本文档中的术语将另作说明。
指南说明 本文档中的示例代是 不规范 的。也就是说，虽然示例代码是属于 Google 风格，但并不意味着这是编写优雅代码的唯一方式。示例中代码的风格不应被作为执行的准则。
 源文件准则 文件名 源文件的名称包含了区分大小写的（并且是 唯一 的）顶级类的类名和 .java 扩展名组成。
文件编码：UTF-8 源文件使用 UTF-8 编码。</description>
    </item>
    
    <item>
      <title>Docker Compose 的 Java 版实践</title>
      <link>/2020/03/18/docker-compose-%E7%9A%84-java-%E7%89%88%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 18 Mar 2020 10:55:02 +0800</pubDate>
      
      <guid>/2020/03/18/docker-compose-%E7%9A%84-java-%E7%89%88%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;Docker Compose 是用于定义和运行多个 Docker Container 的工具。Docker 官方在 &lt;a href=&#34;https://docs.docker.com/compose/gettingstarted/&#34;&gt;《Get started with Docker Compose》&lt;/a&gt; 文档中，以创建一个基于 Flask 和 Redis 的 Python web 应用，为 Docker 新手提供了一个用于学习和实践 Docker Compose 的简单案例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FantasticMao/springboot-rocketmq-docker/&#34;&gt;SpringBoot-RocketMQ-Docker&lt;/a&gt; 使用 Docker Compose，创建了一个基于 Spring Boot 和 Apache RocketMQ 的 Java web 应用，旨在提供更适用于 Java 相关开发人员的 Docker Compose 实践案例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GC 对性能的影响对比</title>
      <link>/2018/11/14/gc-%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 14 Nov 2018 10:21:22 +0800</pubDate>
      
      <guid>/2018/11/14/gc-%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;p&gt;本篇文章记录一个普通 Web 应用在访问量逐渐增加的情况下，不同类型 GC 对应用性能影响的趋势对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 内存模型与线程</title>
      <link>/2018/07/01/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 01 Jul 2018 19:16:50 +0800</pubDate>
      
      <guid>/2018/07/01/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;p&gt;摘自&lt;a href=&#34;https://book.douban.com/subject/24722612/&#34;&gt;《深入理解 Java 虚拟机》&lt;/a&gt; 第 12 章 Java 内存模型与线程。&lt;/p&gt;
&lt;p&gt;并发处理的广泛应用是使得 &lt;a href=&#34;https://en.wikipedia.org/wiki/Amdahl&#39;s_law&#34;&gt;Amdahl 定律&lt;/a&gt; 代替 &lt;a href=&#34;https://en.wikipedia.org/wiki/Moore&#39;s_law&#34;&gt;Moore 定律&lt;/a&gt; 成为计算机性能发展源动力的根本原因，也是人类「压榨」计算机运算能力的最有力武器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式概览</title>
      <link>/2018/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88/</link>
      <pubDate>Wed, 14 Feb 2018 23:33:47 +0800</pubDate>
      
      <guid>/2018/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88/</guid>
      <description>&lt;p&gt;本篇文章记录我所理解和掌握的设计模式，及其在 JDK 和 Spring 中的一些实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 泛型的擦除</title>
      <link>/2017/01/02/java-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4/</link>
      <pubDate>Mon, 02 Jan 2017 20:12:26 +0800</pubDate>
      
      <guid>/2017/01/02/java-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4/</guid>
      <description>&lt;p&gt;本篇记录 Java 的一个残缺实现，确切地说是 Java SE5 为向后兼容而采取的折中实现 —— 泛型，记录内容包括基本语法、通配符和边界、泛型擦除。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>